---
layout: post
title:  "Day 1"
date: 2016-01-13 10:00:00 -0500
categories: sinatra instagram
---

So you want to build a Sinatra app using Instagram's API? Well you're in luck! I'll go though some of what I did, and hopefully provide some insight.

An easy solution for boiler-plating an app is to use [Snfn][snfn]. Similar to `rails new commandsapp`, you can run `snfn my_app` to get something going. It throws together an application class, and gives you some minimal setup with a views folder and importantly a `config.ru`, for use with `rackup`.

That `config.ru` file contains some information about how your app should be loaded and ran. You can take a look at the `config.ru` file for [Still Leaf][still-leaf], here [in the repo][config-ru]. In mine you'll see some load path stuff, bundler, and so on. What's really important here is the last line;

~~~
run StillLeaf
~~~
{: .language-ruby}

This actually kicks up the application and gives you something to look at. One confusing bit in the beginning that caused me issue was this;

~~~
%w{config/initializers lib}.each do |load_path|
  Find.find(load_path) { |f|
    require f unless f.match(/\/\..+$/) || File.directory?(f)
  }
end
~~~
{: .language-ruby}


The problem here being the `config/initializers`, the first element in the array. While this bit of code is provided by [Snfn][snfn], there is no `config/initializers` directory provided. From the app directory just run this to clear up this issue.

~~~
$ mkdir config
$ cd config/
$ mkdir initializers
~~~

Then when you run `rackup`, it won't blow up trying to load nonexistent directories.

### How to handle ENV variables
I knew I would be hosting this on [Heroku][heroku], because it's easy, free (at first), and well, mostly because I don't know how to set up something on AWS. That'll come in a much later post when I embark on that part of the journey.

I like to use a gem called [dotenv][dotenv], I've used it before and it works well enough for what I need. You set up a `.env` in the root of the app, and it interacts in the application, the same way Heroku environment variables do.

Here's a `.env` setup walkthrough;

First, add it to your `Gemfile`
~~~
# Gemfile
group :test, :development do
  gem 'dotenv-rails'
end
~~~
{: .language-ruby}

Then add it to your `.gitignore`.

~~~
$ touch .env
$ echo .env >> .gitignore
~~~

Then your `.env` will look like this;

~~~
INSTAGRAM_CLIENT_ID=your_client_id
INSTAGRAM_CLIENT_SECRET=your_client_secret
INSTAGRAM_CALLBACK_URL=http://localhost:9292/oauth/callback
GOOGLE_MAPS_GEOCODING_KEY=your_gmaps_geocodding_key
~~~

You'll need to add it to your `config.ru` so the app knows how to load it;

~~~
# config.ru
if ENV['RACK_ENV'] != 'production'
  require 'dotenv'
  Dotenv.load
end
~~~
{: .language-ruby}

Then you can do something like this in the app to use your environment variables.

~~~
ENV["INSTAGRAM_CLIENT_ID"]
~~~
{: .language-ruby}

Boom! Secure environment variables for running the app locally. Up next: I'll walk though some of the set up the [Instagram API][instagram-api] and the pains of [sandbox mode][instagram-sandbox].

[snfn]: https://github.com/zachpendleton/snfn
[still-leaf]: https://github.com/finleye/still-leaf
[config-ru]: https://github.com/finleye/still-leaf/blob/master/config.ru
[heroku]:https://www.heroku.com/
[dotenv]: https://github.com/bkeepers/dotenv
[instagram-api]: https://www.instagram.com/developer/
[instagram-sandbox]: https://www.instagram.com/developer/sandbox/
